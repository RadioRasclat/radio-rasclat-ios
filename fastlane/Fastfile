# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Run tests"
  lane :test do
    scan(scheme: "RadioRasclat")
  end

  desc "Take screenshots"
  lane :screenshots do
    snapshot
  end

  desc "Build application"
  lane :build do
    build_number = number_of_commits
    increment_build_number(
      xcodeproj: "RadioRasclat.xcodeproj",
      build_number: build_number
    )
    build_ios_app(
      scheme: "RadioRasclat"
    )
  end

  desc "Push a new beta build to Testflight"
  lane :beta do

    # ensure that master branch is clean
    ensure_git_status_clean

    # adds beta badge to app icon
    add_badge(dark: true)

    # test app
    test

    # manage authentication and certificates
    cert
    sigh(force: true)

    # build app and increment build number
    build

    # upload beta version to testflight
    upload_to_testflight

    # stash git changes
    reset_git_repo(force: true)

    # display a notification
    notification(
      title: "Radio Rasclat iOS",
      subtitle: "Beta",
      message: "A new beta build (#{number_of_commits}) has been submitted to Testflight.",
      app_icon: "https://radio-rasclat.com/assets/images/radio-rasclat-logo.png"
    )
  end

  desc "Push a new release build to App Store Connect"
  lane :release do |lane|

    # ensure you are in master branch
    ensure_git_branch

    # ensure that master branch is clean
    ensure_git_status_clean
    
    # check the semantic parameter entered
    if !lane[:bump]
      raise "No bump type defined! Use one of: patch | minor | major".red
    end

    # calculates the new version according to
    # the semantic version added
    type = lane[:bump]
    old = last_git_tag
    version = old

    oldArr = old.split('.').map{|v| v.to_i}    

    if type == "patch"
        version = "#{oldArr[0]}.#{oldArr[1]}.#{oldArr[2] + 1}"
    elsif type == "minor"
        version = "#{oldArr[0]}.#{oldArr[1] + 1}.0"
    elsif type == "major"
        version = "#{oldArr[0] + 1}.0.0"
    end   

    if version == old
      UI.user_error!("Wrong release type parameter. Enter: patch | minor | major")
    end

    # set the new version number
    increment_version_number(
      version_number: version
    )

    # test app
    test

    # take screenshots
    screenshots

    # build app and increment build number
    build

    # creates a bump version commit 
    commit_version_bump(
      message: "Version bumped to v#{version}",
      xcodeproj: "RadioRasclat.xcodeproj"
    )

    # push bump commit
    push_to_git_remote(
     tags: false
    )

    # create a local tag with the new version
    add_git_tag(
      message: "RadioRasclat_iOS_#{version}",
      tag: "#{version}"
    )    

    # publish a new release into Github
    # github_release = set_github_release(
    #  api_token: ENV["GITHUB_TOKEN"],
    #  repository_name: "RadioRasclat/radio-rasclat-ios",
    #  name: "RadioRasclat_iOS_#{version}",
    #  tag_name: "#{version}",
    #  description: read_changelog(
    #    changelog_path: './CHANGELOG.md',	# Specify path to CHANGELOG.md
    #    section_identifier: "[#{version}]"	# Specify what section to read
    #  ),
    #  commitish: "master"
    #)

    # Set changelog on App Store Connect
    set_changelog(
      changelog: read_changelog(
        changelog_path: './CHANGELOG.md',	# Specify path to CHANGELOG.md
        section_identifier: "[#{version}]"	# Specify what section to read
      ),
      version: "#{version}"
    )

    # Finally, publish the .ipa on App Store Connect
    deliver(
      overwrite_screenshots: true,
      build_number: number_of_commits,
      force: true,
      automatic_release: true,
      submit_for_review: false
    )

    # stash git changes
    reset_git_repo(force: true)

    # display a notification
    notification(
      title: "Radio Rasclat iOS",
      subtitle: "Production Release",
      message: "A new version (#{version}) has been submitted to the App Store.",
      content_image: "https://radio-rasclat.com/assets/images/radio-rasclat-logo.png"
    )
  end
end
