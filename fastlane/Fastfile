# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Run tests"
  lane :test do
    scan(scheme: "RadioRasclat")
  end

  desc "Take screenshots"
  lane :screenshots do
    snapshot
  end

  desc "Build application"
  lane :build do
    build_number = number_of_commits
    increment_build_number(
      xcodeproj: "RadioRasclat.xcodeproj",
      build_number: build_number
    )
    build_ios_app(
      scheme: "RadioRasclat"
    )
  end

  desc "Upload metadata, screenshots and binary"
  lane :upload do
    deliver(
      force: true,
      automatic_release: false,
      submit_for_review: false
    )
  end

  desc "Push a new beta build to Testflight"
  lane :beta do
    ensure_git_status_clean
    test
    build
    upload_to_testflight
  end

  desc "Run tests, take screenshots, upload deliver file, upload app"
  lane :release do |lane|

    # ensure you are in master branch
    ensure_git_branch

    # ensure that master branch is clean
    ensure_git_status_clean

    # clean pod install
    cocoapods(clean_install: true)
    
    # check the semantic parameter entered
    if !lane[:bump]
      raise "No bump type defined! Use one of: patch | minor | major".red
    end

    # get the last commit comments from Git history
    # and creates our changelog
    comments = changelog_from_git_commits(
      between: [last_git_tag, "HEAD"],
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false, 
      merge_commit_filtering: "exclude_merges" 
    ) 

    # calculates the new version according to
    # the semantic version added
    type = lane[:bump]
    old = last_git_tag
    version = old

    oldArr = old.split('.').map{|v| v.to_i}    

    if type == "patch"
        version = "#{oldArr[0]}.#{oldArr[1]}.#{oldArr[2] + 1}"
    elsif type == "minor"
        version = "#{oldArr[0]}.#{oldArr[1] + 1}.0"
    elsif type == "major"
        version = "#{oldArr[0] + 1}.0.0"
    end   

    if version == old
        UI.user_error!("Wrong release type parameter. Enter: patch | minor | major")
    end

    # set the new version number
    increment_version_number(
        version_number: version
    )

    # test app
    test

    # take screenshots
    screenshots

    # build app and increment build number
    build

    # creates a bump version commit 
    commit_version_bump(
      message: "Version bumped to v#{version}",
      xcodeproj: "RadioRasclat.xcodeproj"
    )

    # push bump commit
    push_to_git_remote(
      tags: false
    )

    # create a local tag with the new version
    add_git_tag(
      message: comments,
      tag: "v#{version}",
      prefix: "v",
      build_number: version
    )    

    # publish a new release into Github
    github_release = set_github_release(
      api_token: ENV["GITHUB_TOKEN"],
      repository_name: "dmnktoe/radio-rasclat-ios",
      name: "#{type.capitalize} version v#{version}",
      tag_name: "v#{version}",
      description: comments,
      commitish: "master"
    )

    # Finally, publish the .ipa on App Store Connect
    upload
  end
end